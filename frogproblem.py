# -*- coding: utf-8 -*-
"""frogproblem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SuQrfVUmCPa2AAoDLBZ2fLjJop_cctx_

#The Frog Problem
###Presented by Timandra Harkness and Matt Parker in [Can you solve The Frog Problem?](https://www.youtube.com/watch?v=ZLTyX4zL2Fc)
###Solution by Blake Rayvid
"""

from scipy.special import comb # nCr function
from itertools import combinations # lists all combinations
from matplotlib import pyplot
import numpy as np

# Each row represents a possible route across the river
def routeMatrix(n, k):
  rows = comb(n - 1, k - 1, 1) # third arg means return exact integer result
  cols = k + 1
  M = [[0 for x in range(cols)] for y in range(rows)] # create blank M
  
  C = list(combinations(range(1, n), k - 1))
  
  for l in range(len(C[0])):
    for r in range(rows):
      M[r][l + 1] = C[r][l]
      
  for r in range(rows):
    M[r][cols - 1] = n
  
  return M

# Multiply probabilities across each row then sum all products
def pathLengthProbability(n, k, m):
  iLower = 1
  iUpper = comb(n - 1, k - 1, 1)
  jLower = 1
  jUpper = k
  
  sumTot = 0
  for i in range(iLower - 1, iUpper):
    prod = 1
    for j in range(jLower - 1, jUpper):
      factor = 1 / (n - m[i][j])
      prod = prod * factor
    sumTot += prod
  
  return sumTot

# Wrapper function for ease of use
def getProb(n, k):
  if k <= n and k >= 1:
    return pathLengthProbability(n, k, routeMatrix(n, k))
  else:
    print("Bad input")
    return 0

# Check that total probability is 1 for several n
for n in range(1, 16):
  s = 0
  for k in range(1, n + 1):
    s += getProb(n, k)
  print(s)

# Calculate expected number of jumps
def expectedValue(n):
  sumTot = 0
  for k in range(1, n + 1):
    sumTot += (k * getProb(n, k))
  return sumTot

expectedValue(10)

# Plot expectation for several values of n
ns = range(1, 21)
exps = []
for n in ns:
  exps.append(expectedValue(n))
pyplot.plot(ns,exps,'ko')
pyplot.xlabel('Number of lillypads')
pyplot.ylabel('Expected number of jumps')
pyplot.title('Frog Problem')
pyplot.xticks(np.arange(min(ns), max(ns) + 1, 1))
pyplot.yticks(np.arange(min(exps), max(exps) + 0.25, 0.25))
pyplot.show()